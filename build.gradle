apply plugin: 'signing'
apply plugin: 'osgi'
apply plugin: 'maven-publish'

group = "org.hamcrest"
version = "1.4-SNAPSHOT"

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'osgi'

    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7

    version = rootProject.version

    repositories {
        mavenCentral()
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    jar {
        manifest {
            attributes 'Implementation-Title': project.name,
                    'Implementation-Vendor': 'hamcrest.org',
                    'Implementation-Version': version
            instruction 'Import-Package', '''javax.xml.namespace; resolution:=optional,
                                         javax.xml.xpath; resolution:=optional,
                                         org.w3c.dom; resolution:=optional,
                                         *'''
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }
}

task allClassesJar(type: Jar, dependsOn: subprojects.tasks['build']) {
    baseName = 'hamcrest-all'
    subprojects.each { subproject ->
        from zipTree(subproject.jar.archivePath)
    }
    manifest {
        attributes 'Implementation-Title': 'hamcrest-all',
                'Implementation-Vendor': 'hamcrest.org',
                'Implementation-Version': version
    }
}


task allSourcesJar(type: Jar) {
    baseName = 'hamcrest-all'
    classifier = 'sources'
    subprojects.each { subproject ->
        from subproject.sourceSets.main.allSource
    }
}

task allJavadoc(type: Javadoc) {
    group = 'Documentation'
    description = 'Generate combined Javadoc for all projects'
    title = "Hamcrest All $version API"
    subprojects.each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}

task allJavadocJar(type: Jar) {
    classifier = 'javadoc'
    from allJavadoc
}

def pomConfigurationFor(String pomName, String pomDescription) {
    return {
        name = pomName
        description = pomDescription
        url = 'http://hamcrest.org/JavaHamcrest/'

        scm {
            connection = 'git@github.com:hamcrest/JavaHamcrest.git'
            url = 'https://github.com/hamcrest/JavaHamcrest'
        }

        licenses {
            license {
                name = 'BSD Licence 3'
                url = 'http://opensource.org/licenses/BSD-3-Clause'
            }
        }

        developers {
            developer {
                id = 'joewalnes'
                name = 'Joe Walnes'
            }
            developer {
                id = 'npryce'
                name = 'Nat Pryce'
            }
            developer {
                id = 'sf105'
                name = 'Steve Freeman'
            }
        }
    }
}

publishing {
    publications {
        def coreProject = project(':hamcrest-core')
        hamcrestCore(MavenPublication) {
            from coreProject.components.java
            artifactId coreProject.name
            artifact coreProject.sourcesJar
            artifact coreProject.javadocJar
            pom pomConfigurationFor(
                    'Hamcrest Core',
                    'This is the core API of hamcrest matcher framework to be used by third-party framework providers. This includes the a foundation set of matcher implementations for common operations.')
        }

        def libraryProject = project(':hamcrest-library')
        hamcrestLibrary(MavenPublication) {
            from libraryProject.components.java
            artifactId = libraryProject.name
            artifact libraryProject.sourcesJar
            artifact libraryProject.javadocJar
            pom pomConfigurationFor(
                    'Hamcrest Library',
                    'Hamcrest library of matcher implementations.')
        }

        hamcrestAll(MavenPublication) {
            artifactId = 'hamcrest-all'
            artifact allClassesJar
            artifact allSourcesJar
            artifact allJavadocJar
            pom pomConfigurationFor(
                    'Hamcrest All',
                    'A self-contained hamcrest jar containing all of the sub-modules in a single artifact.')
        }
    }
    repositories {
        if (hasProperty('ossrhUsername') && hasProperty('ossrhPassword')) {
            maven {
                def snapshotRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                def stagingRepoUrl  = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                url = version.contains('SNAPSHOT') ? snapshotRepoUrl : stagingRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
    }
}

signing {
    required { hasProperty('ossrhUsername') && hasProperty('ossrhPassword') }
    sign publishing.publications.hamcrestCore
    sign publishing.publications.hamcrestLibrary
    sign publishing.publications.hamcrestAll
}
